diff --git a/node_modules/radspec/dist/defaults.js b/node_modules/radspec/dist/defaults.js
index 8001ffc..21ec698 100644
--- a/node_modules/radspec/dist/defaults.js
+++ b/node_modules/radspec/dist/defaults.js
@@ -1,2 +1,2 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DEFAULT_ETH_NODE=void 0;const DEFAULT_ETH_NODE="wss://mainnet.eth.aragon.network/ws";exports.DEFAULT_ETH_NODE="wss://mainnet.eth.aragon.network/ws";
+"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DEFAULT_ETH_NODE=void 0;const DEFAULT_ETH_NODE=process.env.RPC_UPSTREAM;exports.DEFAULT_ETH_NODE=process.env.RPC_UPSTREAM;
 //# sourceMappingURL=defaults.js.map
\ No newline at end of file
diff --git a/node_modules/radspec/dist/helpers/lib/methodRegistry.js b/node_modules/radspec/dist/helpers/lib/methodRegistry.js
index 5c34728..416573f 100644
--- a/node_modules/radspec/dist/helpers/lib/methodRegistry.js
+++ b/node_modules/radspec/dist/helpers/lib/methodRegistry.js
@@ -1,5 +1,5 @@
 "use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _web3Eth=_interopRequireDefault(require("web3-eth")),_defaults=require("../../defaults");// From: https://github.com/danfinlay/eth-method-registry
-/* eslint-disable key-spacing, quotes */const REGISTRY_LOOKUP_ABI=[{constant:!0,inputs:[{name:"",type:"bytes4"}],name:"entries",outputs:[{name:"",type:"string"}],payable:!1,type:"function"}],REGISTRY_MAP={1:"0x44691B39d1a75dC4E0A0346CBB15E310e6ED1E86"};// networkId -> registry address
+/* eslint-disable key-spacing, quotes */const REGISTRY_LOOKUP_ABI=[{constant:!0,inputs:[{name:"",type:"bytes4"}],name:"entries",outputs:[{name:"",type:"string"}],payable:!1,type:"function"}],REGISTRY_MAP={1:process.env.ADDRESS_SIGNATUREREG};// networkId -> registry address
 class MethodRegistry{constructor(opts={}){this.eth=opts.eth||new _web3Eth.default(_defaults.DEFAULT_ETH_NODE),this.network=opts.network||"1"}// !!! This function can mutate `this.eth`
 async initRegistry(){"1"!==(await this.eth.net.getId())&&(this.eth=new _web3Eth.default(_defaults.DEFAULT_ETH_NODE));const address=REGISTRY_MAP[this.network];if(!address)throw new Error("No method registry found on the requested network.");this.registry=new this.eth.Contract(REGISTRY_LOOKUP_ABI,address)}async lookup(sigBytes){return this.registry||(await this.initRegistry()),this.registry.methods.entries(sigBytes).call()}parse(signature){// TODO: Throw if there are unknown types in the signature or there if is any chars after the closing parenthesis
 let name=signature.match(/^.+(?=\()/)[0];name=name.charAt(0).toUpperCase()+name.slice(1).split(/(?=[A-Z])/).join(" ");const args=signature.match(/\(.+\)/)[0].slice(1,-1).split(",");return{name,args:args.map(arg=>({type:arg}))}}}exports.default=MethodRegistry;
